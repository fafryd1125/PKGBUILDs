# $Id$
# Maintainer: Darek Zielski <dz1125.bug.tracker@gmail.com>
# Contributor: Felix Yan <felixonmars@archlinux.org>

# The Meson Build system:     http://mesonbuild.com/index.html
# This is a work-in-progress: https://github.com/aaronp24/libglvnd/tree/meson
# TODO:                       https://github.com/aaronp24/libglvnd/blob/meson/src/meson.build#L5
# Set "1" to enable

_meson=0

_pkgname=libglvnd
pkgname=lib32-libglvnd-git
pkgver=r534.d850cdd
pkgrel=1
pkgdesc="The GL Vendor-Neutral Dispatch library"
arch=('x86_64')
url="https://github.com/NVIDIA/libglvnd"
license=('custom:BSD-like')
source=("libglvnd::git+https://github.com/NVIDIA/libglvnd.git"
        '0001-khronos-xml-m4.patch'
        'meson_build.patch')
sha1sums=('SKIP'
          'f8c610148d479f79791cd737df86a2ca15c5ff17'
          '0dcd7a175c92b71e59b3ba2f97e1aa291b91067a')

depends=('lib32-libxext' 'libglvnd-git')
makedepends=('lib32-libx11' 'git' 'glproto' 'gcc-multilib')
provides=('lib32-libglvnd' 'lib32-libgl' 'lib32-libegl' 'lib32-libgles')
conflicts=('lib32-libglvnd')

if [[ ${_meson} = 1 ]]; then
  makedepends=(${makedepends[@]} 'meson')
else
  makedepends=(${makedepends[@]} 'python')
fi

pkgver() {
  cd "${_pkgname}"
  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  if [[ ${_meson} = 1 ]]; then
    mkdir build

    cd "${_pkgname}"
    patch -p1 -i ../0001-khronos-xml-m4.patch
    patch -p1 -i ../meson_build.patch
  else
    cd "${_pkgname}"
    # Uncomment if needed

    ##  patch -p1 -i ../

    # *.xml - https://www.khronos.org/
    # *.m4  - https://www.gnu.org/software/autoconf-archive/The-Macros.html#The-Macros
    patch -p1 -i ../0001-khronos-xml-m4.patch

    # https://github.com/NVIDIA/libglvnd/pulls
#    patch -p1 -i ../
  fi
}

build() {
  export CC='gcc -m32'
  export CXX='g++ -m32'
  export PKG_CONFIG_PATH='/usr/lib32/pkgconfig'

  if [[ ${_meson} = 1 ]]; then
    # TODO
    cd build
    meson \
        --prefix=/usr \
        --libdir=/usr/lib32/ \
        --buildtype=plain \
        ../${_pkgname}
    ninja
  else
    cd "${_pkgname}"
    ./autogen.sh
    ./configure \
        --prefix=/usr \
        --libdir=/usr/lib32 \
        --build=i686-pc-linux-gnu \
        --enable-shared \
        --enable-static=no
    make
  fi
}

package() {
  if [[ ${_meson} = 1 ]]; then
    cd build
    DESTDIR="${pkgdir}" ninja install
  else
    cd "${_pkgname}"
    make DESTDIR="${pkgdir}" install
  fi

  cd "${srcdir}/${_pkgname}"
  rm -r "${pkgdir}/usr/include"

  mkdir -p "${pkgdir}/usr/share/licenses"
  ln -s "${pkgname#*-}" "${pkgdir}/usr/share/licenses/${pkgname}"
}
