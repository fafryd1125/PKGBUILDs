# $Id$
# Maintainer: Sven-Hendrik Haase <sh@lutzhaase.com>
# Maintainer: Felix Yan <felixonmars@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>
# Contributor: James Rayner <iphitus@gmail.com>
# Contributor: Aaron Plattner <aplattner@nvidia.com>
# Contributor: Darek Zielski <dz1125.bug.tracker@gmail.com>

pkgname=lib32-nvidia-drivers
pkgver=418.30
pkgrel=1
pkgdesc="NVIDIA drivers libraries (32-bit)"
arch=('x86_64')
url="http://www.nvidia.com/"
license=('custom')
depends=('nvidia-drivers' 'lib32-libglvnd')
optdepends=('lib32-libvdpau: VDPAU wrapper library'
            'lib32-egl-wayland: The EGLStream-based Wayland external platform')
provides=('lib32-vulkan-driver' 'lib32-opengl-driver')
options=('!strip')
_pkg="NVIDIA-Linux-${arch}-${pkgver}"
source=("http://us.download.nvidia.com/XFree86/Linux-${arch}/${pkgver}/${_pkg}.run")
sha512sums=('f227923528d54e66d9f79bfaf7239a0e7dd6d59cfa7a7766b36c9a91be091ac0702874f9ed460d4171fb6b67d88adbe2415c70e4f82ff87c8baebd045a493831')

prepare() {
    sh ${_pkg}.run --extract-only
}

process_manifest () {
    declare -A type_handlers=(
        # lib32-nvidia-drivers
        ["OPENGL_LIB"]="lib32-nvidia-drivers install_lib"
        ["OPENGL_SYMLINK"]="lib32-nvidia-drivers symlink_lib"
        ["TLS_LIB"]="lib32-nvidia-drivers install_tls"
        ["VDPAU_LIB"]="lib32-nvidia-drivers install_lib_with_path"
        ["VDPAU_SYMLINK"]="lib32-nvidia-drivers symlink_lib_with_path"

        # Ignored entries
        ["DKMS_CONF"]="ignored"                  # dkms isn't needed with Arch's version-locked packages
        ["EGL_CLIENT_LIB"]="ignored"             # provided by libglvnd
        ["EGL_CLIENT_SYMLINK"]="ignored"         # provided by libglvnd
        ["EGL_EXTERNAL_PLATFORM_JSON"]="ignored" # provided by egl-wayland
        ["GLVND_LIB"]="ignored"                  # provided by libglvnd
        ["GLVND_SYMLINK"]="ignored"              # provided by libglvnd
        ["GLX_CLIENT_LIB"]="ignored"             # provided by libglvnd
        ["GLX_CLIENT_SYMLINK"]="ignored"         # provided by libglvnd
        ["INSTALLER_BINARY"]="ignored"           # provided by pacman :)
        ["KERNEL_MODULE_SRC"]="ignored"          # kernel modules are handled by the nvidia PKGBUILD
        ["LIBGL_LA"]="ignored"                   # .la files are not needed
        ["OPENCL_WRAPPER_LIB"]="ignored"         # provided by libcl
        ["OPENCL_WRAPPER_SYMLINK"]="ignored"     # provided by libcl
        ["UTILITY_BIN_SYMLINK"]="ignored"        # provided by pacman

        # Ignored entries for lib32-nvidia-drivers package
        # opencl-nvidia
        ["CUDA_ICD"]="ignored"
        ["OPENCL_LIB"]="ignored"                 # lib32-opencl-nvidia
        ["OPENCL_LIB_SYMLINK"]="ignored"
        # nvidia-drivers
        ["APPLICATION_PROFILE"]="ignored"        # lib32-nvidia-drivers
        ["NVIDIA_MODPROBE_MANPAGE"]="ignored"
        ["NVIDIA_MODPROBE"]="ignored"
        ["GLVND_EGL_ICD_JSON"]="ignored"
        ["GLX_MODULE_SHARED_LIB"]="ignored"
        ["GLX_MODULE_SYMLINK"]="ignored"
        ["VULKAN_ICD_JSON"]="ignored"
        ["XMODULE_SHARED_LIB"]="ignored"
        ["XORG_OUTPUTCLASS_CONFIG"]="ignored"
        # nvidia-utils
        ["CUDA_LIB"]="ignored"
        ["CUDA_SYMLINK"]="ignored"
        ["ENCODEAPI_LIB"]="ignored"
        ["ENCODEAPI_LIB_SYMLINK"]="ignored"
        ["NVCUVID_LIB"]="ignored"
        ["NVCUVID_LIB_SYMLINK"]="ignored"
        ["NVIFR_LIB"]="ignored"
        ["NVIFR_LIB_SYMLINK"]="ignored"
        ["UTILITY_LIB"]="ignored"
        ["UTILITY_LIB_SYMLINK"]="ignored"
        ["UTILITY_BINARY"]="ignored"             # lib32-nvidia-utils
        ["DOT_DESKTOP"]="ignored"
        ["MANPAGE"]="ignored"
        ["DOCUMENTATION"]="ignored"
    )

    tail -n +9 .manifest | {
        while read name perm type extra1 extra2 extra3 extra4; do
            if [ ${type_handlers[${type}]+isset} ]; then
                local data=( ${type_handlers[${type}]} )
                local pkg=${data[0]}
                local handler=${data[1]}

                # Check if this file type is handled by the current package.
                # Otherwise, ignore it.
                if [ ${pkg} = ${pkgname} ]; then
                    eval ${handler} $name $perm $type $extra1 $extra2 $extra3 $extra4
                fi
            else
                echo "Unrecognized manifest type ${type}"
                exit 1
            fi
        done
    }

    mkdir -p "${pkgdir}/usr/share/licenses"
    ln -s nvidia "${pkgdir}/usr/share/licenses/${pkgname}"
}

install_lib_with_path() {
    if [ "$4" == COMPAT32 ]; then
        local libname=$(basename $1)
        install -D -m$2 "$1" "${pkgdir}/usr/lib32/$5${libname}"
    fi
}

install_lib() {
    if [ "$4" == COMPAT32 ]; then
        local libname=$(basename $1)
        install -D -m$2 "$1" "${pkgdir}/usr/lib32/$6${libname}"
    fi
}

install_tls() {
    if [ "$4" == COMPAT32 ]; then
        local libname=$(basename $1)
        install -D -m$2 "$1" "${pkgdir}/usr/lib32/${libname}"
    fi
}

symlink_lib_with_path() {
    if [ "$4" == COMPAT32 ]; then
        ln -s "$6" "${pkgdir}/usr/lib32/$5$1";
    fi
}

symlink_lib() {
    if [ "$4" == COMPAT32 ]; then
       # Uncomment if needed
#        case "$1" in
#            libGLX_indirect*)
#                 # Skip to avoid conflict with lib32-mesa-glvnd package.
#                 ;;
#            *)
                 ln -s "$5" "${pkgdir}/usr/lib32/$1"
#                 ;;
#         esac
    fi
}

package() {
    cd "${_pkg}"

    process_manifest
}
