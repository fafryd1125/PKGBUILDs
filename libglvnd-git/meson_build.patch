diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..cf61ce2
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,19 @@
+sudo: false
+
+os:
+  - linux
+
+language:
+  - c
+
+cache:
+  - ccache
+
+services:
+  - docker
+
+script:
+  - echo FROM aplattner/arch-glvnd-meson:v3 > Dockerfile
+  - echo ADD . /root >> Dockerfile
+  - docker build -t withgit .;
+  - docker run --volume $HOME/.ccache:/root/.ccache withgit /bin/sh -c "Xvfb :3 & cd /root && TRAVIS=true CC=$CC LANG=$LANG meson build && LANG=$LANG DISPLAY=:3 ninja -C build test"
diff --git a/README.md b/README.md
index 87e45d6..01fef05 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,8 @@
 libglvnd: the GL Vendor-Neutral Dispatch library
 ================================================
 
+[![Travis](https://travis-ci.org/aaronp24/libglvnd.svg?branch=meson)](https://travis-ci.org/aaronp24/libglvnd)
+
 Introduction
 ------------
 
diff --git a/include/meson.build b/include/meson.build
new file mode 100644
index 0000000..5e31df8
--- /dev/null
+++ b/include/meson.build
@@ -0,0 +1 @@
+install_subdir('glvnd', install_dir : 'include')
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..ce3b5df
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,24 @@
+project('libglvnd', 'c', meson_version : '>=0.41')
+
+glproto_dep = dependency('glproto')
+x11_dep = dependency('x11')
+xext_dep = dependency('xext')
+
+inc = include_directories('include')
+
+datadir = join_paths(get_option('prefix'), get_option('datadir'))
+sysconfdir = join_paths(get_option('prefix'), get_option('sysconfdir'))
+
+subdir('src')
+subdir('include')
+subdir('tests')
+
+import('pkgconfig').generate(
+    name : 'libglvnd',
+    version : '1.0.0',
+    description : 'Vendor-neutral OpenGL dispatch library vendor interface',
+    variables : [
+        'datarootdir=${prefix}/@0@'.format(datadir),
+        'datadir=${datarootdir}',
+    ],
+)
diff --git a/meson_options.txt b/meson_options.txt
new file mode 100644
index 0000000..8a6592d
--- /dev/null
+++ b/meson_options.txt
@@ -0,0 +1,6 @@
+option('egl',  type : 'boolean', value : true, description : 'build support for EGL')
+option('glx',  type : 'boolean', value : true, description : 'build support for GLX')
+option('gles', type : 'boolean', value : true, description : 'build support for libGLES*.so libraries')
+
+option('asm',  type : 'boolean', value : true, description : 'assembly usage [on supported platforms]')
+option('tls',  type : 'boolean', value : true, description : 'TLS usage [on supported platforms]')
diff --git a/src/EGL/meson.build b/src/EGL/meson.build
new file mode 100644
index 0000000..ff35569
--- /dev/null
+++ b/src/EGL/meson.build
@@ -0,0 +1,28 @@
+egl = shared_library('EGL',
+    [
+        'libegl.c',
+        'libeglcurrent.c',
+        'libeglmapping.c',
+        'libeglvendor.c',
+        'libeglerror.c',
+    ],
+    c_args : [
+         '-DDEFAULT_EGL_VENDOR_CONFIG_DIRS="@0@/glvnd/egl_vendor.d:@1@/glvnd/egl_vendor.d"'.format(
+            sysconfdir, datadir),
+    ],
+    dependencies : [
+        cJSON_dep,
+        egl_dispatch_stubs_dep,
+        gldispatch_dep,
+        glvnd_pthread_dep,
+        libdl,
+        libm,
+        utils_misc_dep,
+        winsys_dispatch_dep,
+        x11_dep,
+    ],
+    include_directories : [inc, util_inc],
+    sources : g_egldispatchstubs_h,
+    version : '1.1.0',
+    install : true,
+)
diff --git a/src/GL/meson.build b/src/GL/meson.build
new file mode 100644
index 0000000..5fb9824
--- /dev/null
+++ b/src/GL/meson.build
@@ -0,0 +1,17 @@
+gl = shared_library('GL',
+    [
+        'libgl.c',
+        libglglxwrapper_gen,
+    ],
+    link_whole : [
+        glapi_gl,
+    ],
+    dependencies : [
+        glx_dep,
+        gldispatch_dep,
+        x11_dep,
+    ],
+    include_directories : [inc, glx_inc, util_inc],
+    version : '1.7.0',
+    install : true,
+)
diff --git a/src/GLESv1/meson.build b/src/GLESv1/meson.build
new file mode 100644
index 0000000..2e0a1c2
--- /dev/null
+++ b/src/GLESv1/meson.build
@@ -0,0 +1,15 @@
+glesv1_cm = shared_library('GLESv1_CM', opengl_main_src,
+    include_directories : opengl_main_inc,
+    link_depends : [
+        g_glesv1_exports_sym,
+    ],
+    link_whole : [
+        glapi_glesv1,
+    ],
+    dependencies : [
+        gldispatch_dep,
+        g_glesv1_exports_sym_dep,
+    ],
+    version : '1.2.0',
+    install : true,
+)
diff --git a/src/GLESv2/meson.build b/src/GLESv2/meson.build
new file mode 100644
index 0000000..bbdabea
--- /dev/null
+++ b/src/GLESv2/meson.build
@@ -0,0 +1,15 @@
+glesv2 = shared_library('GLESv2', opengl_main_src,
+    include_directories : opengl_main_inc,
+    link_depends : [
+        g_glesv2_exports_sym,
+    ],
+    link_whole : [
+        glapi_glesv2,
+    ],
+    dependencies : [
+        gldispatch_dep,
+        g_glesv2_exports_sym_dep,
+    ],
+    version : '2.1.0',
+    install : true,
+)
diff --git a/src/GLX/meson.build b/src/GLX/meson.build
new file mode 100644
index 0000000..c11cf22
--- /dev/null
+++ b/src/GLX/meson.build
@@ -0,0 +1,28 @@
+glx_inc = include_directories('.')
+
+glx_src = [
+    'libglx.c',
+    'libglxmapping.c',
+    'libglxproto.c',
+]
+
+glx = shared_library('GLX',
+    sources : glx_src,
+    include_directories: [inc, util_inc],
+    dependencies : [
+        app_error_check_dep,
+        gldispatch_dep,
+        glvnd_genentry_dep,
+        glvnd_pthread_dep,
+        winsys_dispatch_dep,
+        libdl,
+        utils_misc_dep,
+        glproto_dep,
+        x11_dep,
+        xext_dep,
+    ],
+    version : '0.0.0',
+    install : true,
+)
+
+glx_dep = declare_dependency(link_with : glx)
diff --git a/src/GLdispatch/export_list.ver b/src/GLdispatch/export_list.ver
new file mode 100644
index 0000000..e66bd43
--- /dev/null
+++ b/src/GLdispatch/export_list.ver
@@ -0,0 +1,24 @@
+{
+    global:
+
+    _glapi_get_current ;
+    _glapi_Current ;
+    _glapi_tls_Current ;
+    __glDispatchCheckMultithreaded ;
+    __glDispatchCreateTable ;
+    __glDispatchDestroyTable ;
+    __glDispatchFini ;
+    __glDispatchGetABIVersion ;
+    __glDispatchGetCurrentThreadState ;
+    __glDispatchGetProcAddress ;
+    __glDispatchInit ;
+    __glDispatchLoseCurrent ;
+    __glDispatchMakeCurrent ;
+    __glDispatchNewVendorID ;
+    __glDispatchRegisterStubCallbacks ;
+    __glDispatchReset ;
+    __glDispatchUnregisterStubCallbacks ;
+    __glDispatchForceUnpatch ;
+
+    local: *;
+};
diff --git a/src/GLdispatch/meson.build b/src/GLdispatch/meson.build
new file mode 100644
index 0000000..a0e386a
--- /dev/null
+++ b/src/GLdispatch/meson.build
@@ -0,0 +1,28 @@
+subdir('vnd-glapi')
+
+gldispatch_inc = include_directories([
+    'vnd-glapi',
+    '.',
+])
+
+gldispatch_linker_script = 'export_list.ver'
+
+gldispatch = shared_library('GLdispatch', 'GLdispatch.c',
+    include_directories : [inc, util_inc, gldispatch_inc],
+    link_whole : [
+        glapi,
+    ],
+    dependencies : [
+        glvnd_pthread_dep,
+        app_error_check_dep,
+        libdl,
+    ],
+    link_depends : gldispatch_linker_script,
+    version : '0.0.0',
+    install : true,
+    link_args : '-Wl,--version-script,@0@/@1@'.format(meson.current_source_dir(), gldispatch_linker_script),
+)
+gldispatch_dep = declare_dependency(
+    link_with : gldispatch,
+    include_directories : gldispatch_inc,
+)
diff --git a/src/GLdispatch/vnd-glapi/meson.build b/src/GLdispatch/vnd-glapi/meson.build
new file mode 100644
index 0000000..d3f39f8
--- /dev/null
+++ b/src/GLdispatch/vnd-glapi/meson.build
@@ -0,0 +1,99 @@
+entry_src = []
+
+pre_glapi_src = []
+
+if dispatch_entry_type == 'x86_tls'
+  entry_src += ['entry_x86_tls.c', 'entry_simple_asm.c', 'entry_common.c']
+elif dispatch_entry_type == 'x86_tsd'
+  entry_src += ['entry_x86_tsd.c', 'entry_simple_asm.c', 'entry_common.c']
+elif dispatch_entry_type == 'x86_64_tls'
+  entry_src += ['entry_x86_64_tls.c', 'entry_simple_asm.c', 'entry_common.c']
+elif dispatch_entry_type == 'x86_64_tsd'
+  entry_src += ['entry_x86_64_tsd.c', 'entry_simple_asm.c', 'entry_common.c']
+elif dispatch_entry_type == 'armv7_tsd'
+  entry_src += ['entry_armv7_tsd.c', 'entry_common.c']
+elif dispatch_entry_type == 'aarch64_tsd'
+  entry_src += ['entry_aarch64_tsd.c', 'entry_simple_asm.c', 'entry_common.c']
+elif dispatch_entry_type == 'ppc64le_tls'
+  entry_src += ['entry_ppc64le_tls.c', 'entry_simple_asm.c', 'entry_common.c']
+elif dispatch_entry_type == 'ppc64le_tsd'
+  entry_src += ['entry_ppc64le_tsd.c', 'entry_simple_asm.c', 'entry_common.c']
+elif dispatch_entry_type == 'pure_c'
+  entry_src += 'entry_pure_c.c'
+endif
+
+if use_tls
+  pre_glapi_src += 'u_current_tls.c'
+else
+  pre_glapi_src += 'u_current_tsd.c'
+endif
+
+glapi_src = entry_src + pre_glapi_src + [
+    'mapi_glapi.c',
+    'stub.c',
+    'table.c',
+    'u_execmem.c',
+]
+
+glapi = static_library('glapi',
+    sources : glapi_src,
+    include_directories : [inc, util_inc],
+    c_args : '-DMAPI_ABI_HEADER="glapi_mapi_tmp.h"',
+    dependencies : [
+        glapi_mapi_dep,
+        utils_misc_dep,
+    ],
+)
+
+glapi_gl = static_library('glapi_gl',
+    sources : [entry_src, 'stub.c'],
+    include_directories : [inc, util_inc],
+    c_args : [
+        '-DMAPI_ABI_HEADER="glapi_mapi_gl_tmp.h"',
+        '-DSTATIC_DISPATCH_ONLY',
+    ],
+    dependencies : [
+        glapi_mapi_gl_dep,
+        utils_misc_dep,
+    ],
+)
+
+glapi_opengl = static_library('glapi_opengl',
+    sources : [entry_src, 'stub.c'],
+    include_directories : [inc, util_inc],
+    c_args : [
+        '-DMAPI_ABI_HEADER="glapi_mapi_opengl_tmp.h"',
+        '-DSTATIC_DISPATCH_ONLY',
+    ],
+    dependencies : [
+        glapi_mapi_opengl_dep,
+        utils_misc_dep,
+    ],
+)
+
+# TODO: Abstract STATIC_DISPATCH_ONLY
+glapi_glesv1 = static_library('glapi_glesv1',
+    sources : [entry_src, 'stub.c'],
+    include_directories : [inc, util_inc],
+    c_args : [
+        '-DMAPI_ABI_HEADER="glapi_mapi_glesv1_tmp.h"',
+        '-DSTATIC_DISPATCH_ONLY',
+    ],
+    dependencies : [
+        glapi_mapi_glesv1_dep,
+        utils_misc_dep,
+    ],
+)
+
+glapi_glesv2 = static_library('glapi_glesv2',
+    sources : [entry_src, 'stub.c'],
+    include_directories : [inc, util_inc],
+    c_args : [
+        '-DMAPI_ABI_HEADER="glapi_mapi_glesv2_tmp.h"',
+        '-DSTATIC_DISPATCH_ONLY',
+    ],
+    dependencies : [
+        glapi_mapi_glesv2_dep,
+        utils_misc_dep,
+    ],
+)
diff --git a/src/OpenGL/meson.build b/src/OpenGL/meson.build
new file mode 100644
index 0000000..5d35e39
--- /dev/null
+++ b/src/OpenGL/meson.build
@@ -0,0 +1,18 @@
+opengl_main_src = files('libopengl.c')
+opengl_main_inc = [inc, util_inc, gldispatch_inc]
+
+opengl = shared_library('OpenGL', opengl_main_src,
+    link_depends : [
+        g_opengl_exports_sym,
+    ],
+    link_whole : [
+        glapi_opengl,
+    ],
+    dependencies : [
+        gldispatch_dep,
+        g_opengl_exports_sym_dep,
+    ],
+    include_directories : opengl_main_inc,
+    version : '0.0.0',
+    install : true,
+)
diff --git a/src/generate/eglFunctionList.py b/src/generate/eglFunctionList.py
index c14dd28..ef08a76 100644
--- a/src/generate/eglFunctionList.py
+++ b/src/generate/eglFunctionList.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python
 
 """
 Contains a list of EGL functions to generate dispatch functions for.
diff --git a/src/generate/gen_egl_dispatch.py b/src/generate/gen_egl_dispatch.py
index 7c65e0b..393fccf 100755
--- a/src/generate/gen_egl_dispatch.py
+++ b/src/generate/gen_egl_dispatch.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python
 
 """
 Generates dispatch functions for EGL.
diff --git a/src/generate/gen_libOpenGL_exports.py b/src/generate/gen_libOpenGL_exports.py
index 92e4e7f..259f362 100755
--- a/src/generate/gen_libOpenGL_exports.py
+++ b/src/generate/gen_libOpenGL_exports.py
@@ -39,9 +39,12 @@ def _main():
     xmlFiles = sys.argv[2:]
     roots = [ etree.parse(filename).getroot() for filename in xmlFiles ]
 
+    print("{ global:")
     names = genCommon.getExportNamesFromRoots(target, roots)
     for name in sorted(names):
         print(name)
+        print(";")
+    print("local: *; };")
 
 if (__name__ == "__main__"):
     _main()
diff --git a/src/generate/gen_libOpenGL_exports_old.py b/src/generate/gen_libOpenGL_exports_old.py
new file mode 100755
index 0000000..92e4e7f
--- /dev/null
+++ b/src/generate/gen_libOpenGL_exports_old.py
@@ -0,0 +1,48 @@
+#!/usr/bin/env python
+
+# (C) Copyright 2015, NVIDIA CORPORATION.
+# All Rights Reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# on the rights to use, copy, modify, merge, publish, distribute, sub
+# license, and/or sell copies of the Software, and to permit persons to whom
+# the Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice (including the next
+# paragraph) shall be included in all copies or substantial portions of the
+# Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
+# IBM AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+# IN THE SOFTWARE.
+#
+# Authors:
+#    Kyle Brenneman <kbrenneman@nvidia.com>
+
+"""
+Generates the list of functions that should be exported from libOpenGL.so.
+"""
+
+import sys
+import xml.etree.cElementTree as etree
+
+import genCommon
+
+def _main():
+    target = sys.argv[1]
+    xmlFiles = sys.argv[2:]
+    roots = [ etree.parse(filename).getroot() for filename in xmlFiles ]
+
+    names = genCommon.getExportNamesFromRoots(target, roots)
+    for name in sorted(names):
+        print(name)
+
+if (__name__ == "__main__"):
+    _main()
+
diff --git a/src/generate/meson.build b/src/generate/meson.build
new file mode 100644
index 0000000..3bea5ca
--- /dev/null
+++ b/src/generate/meson.build
@@ -0,0 +1,133 @@
+gen_mapi_script = find_program('gen_gldispatch_mapi.py')
+glapi_gen_gl_core_xml = files('xml/gl.xml')
+glapi_gen_gl_xml = glapi_gen_gl_core_xml + files('xml/gl_other.xml')
+
+glapi_mapi_gen = custom_target('glapi_mapi_tmp.h',
+    command : [gen_mapi_script, 'gldispatch', glapi_gen_gl_xml],
+    capture : true,
+    depend_files : files('genCommon.py') + glapi_gen_gl_xml,
+    output : 'glapi_mapi_tmp.h',
+)
+glapi_mapi_dep = declare_dependency(
+    sources : glapi_mapi_gen,
+)
+
+# opengl
+glapi_mapi_opengl_gen = custom_target('glapi_mapi_opengl_tmp.h',
+    command : [gen_mapi_script, 'opengl', glapi_gen_gl_xml],
+    capture : true,
+    depend_files : files('genCommon.py') + glapi_gen_gl_xml,
+    output : 'glapi_mapi_opengl_tmp.h',
+)
+glapi_mapi_opengl_dep = declare_dependency(
+    sources : glapi_mapi_opengl_gen,
+)
+
+# gl
+glapi_mapi_gl_gen = custom_target('glapi_mapi_gl_tmp.h',
+    command : [gen_mapi_script, 'gl', glapi_gen_gl_xml],
+    capture : true,
+    depend_files : files('genCommon.py') + glapi_gen_gl_xml,
+    output : 'glapi_mapi_gl_tmp.h',
+)
+glapi_mapi_gl_dep = declare_dependency(
+    sources : glapi_mapi_gl_gen,
+)
+
+# glesv1
+glapi_mapi_glesv1_gen = custom_target('glapi_mapi_glesv1_tmp.h',
+    command : [gen_mapi_script, 'glesv1', glapi_gen_gl_xml],
+    capture : true,
+    depend_files : files('genCommon.py') + glapi_gen_gl_xml,
+    output : 'glapi_mapi_glesv1_tmp.h',
+)
+glapi_mapi_glesv1_dep = declare_dependency(
+    sources : glapi_mapi_glesv1_gen,
+)
+
+# glesv2
+glapi_mapi_glesv2_gen = custom_target('glapi_mapi_glesv2_tmp.h',
+    command : [gen_mapi_script, 'glesv2', glapi_gen_gl_xml],
+    capture : true,
+    depend_files : files('genCommon.py') + glapi_gen_gl_xml,
+    output : 'glapi_mapi_glesv2_tmp.h',
+)
+glapi_mapi_glesv2_dep = declare_dependency(
+    sources : glapi_mapi_glesv2_gen,
+)
+
+glapi_gen_libglglxstubs_script = find_program('gen_libgl_glxstubs.py')
+glapi_gen_glx_xml = files('xml/glx.xml', 'xml/glx_other.xml')
+libglglxwrapper_gen = custom_target('g_libglglxwrapper.c',
+    command : [glapi_gen_libglglxstubs_script, glapi_gen_glx_xml],
+    capture : true,
+    depend_files : files('genCommon.py') + glapi_gen_glx_xml,
+    output : 'g_libglglxwrapper.c',
+)
+libglglxwrapper_dep = declare_dependency(
+    sources : libglglxwrapper_gen,
+)
+
+glapi_gen_libopengl_exports_script = find_program('gen_libOpenGL_exports.py')
+g_opengl_exports_sym = custom_target('g_opengl_exports.sym',
+    command : [glapi_gen_libopengl_exports_script, 'opengl', glapi_gen_gl_core_xml],
+    capture : true,
+    depend_files : files('genCommon.py', 'gen_libOpenGL_exports.py') + glapi_gen_gl_core_xml,
+    output : 'g_opengl_exports.sym',
+)
+g_opengl_exports_sym_dep = declare_dependency(
+    sources : g_opengl_exports_sym,
+    link_args : '-Wl,--version-script,@0@'.format(g_opengl_exports_sym.full_path()),
+)
+
+g_glesv1_exports_sym = custom_target('g_glesv1_exports.sym',
+    command : [glapi_gen_libopengl_exports_script, 'glesv1', glapi_gen_gl_xml],
+    capture : true,
+    depend_files : files('genCommon.py', 'gen_libOpenGL_exports.py') + glapi_gen_gl_xml,
+    output : 'g_glesv1_exports.sym',
+)
+g_glesv1_exports_sym_dep = declare_dependency(
+    sources : g_glesv1_exports_sym,
+    link_args : '-Wl,--version-script,@0@'.format(g_glesv1_exports_sym.full_path()),
+)
+
+g_glesv2_exports_sym = custom_target('g_glesv2_exports.sym',
+    command : [glapi_gen_libopengl_exports_script, 'glesv2', glapi_gen_gl_xml],
+    capture : true,
+    depend_files : files('genCommon.py', 'gen_libOpenGL_exports.py') + glapi_gen_gl_xml,
+    output : 'g_glesv2_exports.sym',
+)
+g_glesv2_exports_sym_dep = declare_dependency(
+    sources : g_glesv2_exports_sym,
+    link_args : '-Wl,--version-script,@0@'.format(g_glesv2_exports_sym.full_path()),
+)
+
+# EGL_dispatch_stubs
+# TODO: Move egldispatchstubs.h to here
+egl_inc = include_directories('../EGL')
+egl_gen_dispatch_script = find_program('gen_egl_dispatch.py')
+egl_gen_files = files('eglFunctionList.py', 'xml/egl.xml')
+g_egldispatchstubs_c = custom_target('g_egldispatchstubs.c',
+    command : [egl_gen_dispatch_script, 'source', egl_gen_files],
+    capture : true,
+    depend_files : files('gen_egl_dispatch.py') + egl_gen_files,
+    output : 'g_egldispatchstubs.c',
+)
+g_egldispatchstubs_h = custom_target('g_egldispatchstubs.h',
+    command : [egl_gen_dispatch_script, 'header', egl_gen_files],
+    capture : true,
+    depend_files : files('gen_egl_dispatch.py') + egl_gen_files,
+    output : 'g_egldispatchstubs.h',
+)
+egl_dispatch_stubs = static_library('EGL_dispatch_stubs',
+    [
+        '../EGL/egldispatchstubs.c',
+        g_egldispatchstubs_c,
+    ],
+    include_directories : [inc, egl_inc],
+    sources : g_egldispatchstubs_h,
+    dependencies : [
+        x11_dep,
+    ],
+)
+egl_dispatch_stubs_dep = declare_dependency(link_with : egl_dispatch_stubs)
diff --git a/src/meson.build b/src/meson.build
new file mode 100644
index 0000000..8e3e2bb
--- /dev/null
+++ b/src/meson.build
@@ -0,0 +1,82 @@
+cc = meson.get_compiler('c')
+libdl = cc.find_library('dl', required : false)
+libm = cc.find_library('m')
+
+# TODO: Handle these dynamically
+c_defines = [
+    'HAVE_MINCORE',
+    'HAVE_PTHREAD_RWLOCK_T',
+    'HAVE_RTLD_NOLOAD',
+    'HAVE_SYNC_INTRINSICS',
+    'HAVE_TYPEOF',
+    'USE_ATTRIBUTE_CONSTRUCTOR',
+]
+
+if get_option('asm')
+  if host_machine.cpu_family() == 'x86'
+    c_defines += ['USE_X86_ASM', 'USE_MMX_ASM', 'USE_3DNOW_ASM', 'USE_SSE_ASM']
+  elif host_machine.cpu_family() == 'x86_64'
+    c_defines += ['USE_X86_64_ASM']
+  elif host_machine.cpu_family() == 'armv7l'
+    c_defines += ['USE_ARMV7_ASM']
+  elif host_machine.cpu_family() == 'aarch64'
+    c_defines += ['USE_AARCH64_ASM']
+  elif host_machine.cpu_family() == 'ppc64le'
+    c_defines += ['USE_PPC64LE_ASM']
+  endif
+endif
+
+if get_option('tls')
+  use_tls = cc.compiles('__thread int foo __attribute__((tls_model("initial-exec")));', name : 'TLS detection')
+else
+  use_tls = false
+endif
+
+if ['x86', 'x86_64'].contains(host_machine.cpu_family())
+  if use_tls
+    c_defines += ['GLDISPATCH_USE_TLS']
+    dispatch_entry_type = '@0@_tls'.format(host_machine.cpu_family())
+  else
+    dispatch_entry_type = '@0@_tsd'.format(host_machine.cpu_family())
+  endif
+elif host_machine.cpu_family() == 'armv7l'
+  dispatch_entry_type = 'armv7_tsd'
+elif host_machine.cpu_family() == 'aarch64'
+  dispatch_entry_type = 'aarch64_tsd'
+elif host_machine.cpu_family() == 'ppc64le'
+  if use_tls
+    c_defines += ['GLDISPATCH_USE_TLS']
+    dispatch_entry_type = 'ppc64le_tls'
+  else
+    dispatch_entry_type = 'ppc64le_tsd'
+  endif
+else
+  # The C stubs will work with either TLS or TSD.
+  gldispatch_entry_type = 'pure_c'
+endif
+
+foreach d : c_defines
+  add_project_arguments('-D' + d + '=1', language : 'c')
+endforeach
+
+add_project_arguments('-fvisibility=hidden', language : 'c')
+add_project_link_arguments('-Wl,-Bsymbolic', language : 'c')
+
+subdir('generate')
+subdir('util')
+subdir('GLdispatch')
+subdir('OpenGL')
+
+if get_option('egl')
+  subdir('EGL')
+endif
+
+if get_option('glx')
+  subdir('GLX')
+  subdir('GL')
+endif
+
+if get_option('gles')
+  subdir('GLESv1')
+  subdir('GLESv2')
+endif
diff --git a/src/util/meson.build b/src/util/meson.build
new file mode 100644
index 0000000..ad71747
--- /dev/null
+++ b/src/util/meson.build
@@ -0,0 +1,37 @@
+util_inc = include_directories('.', 'uthash/src')
+
+app_error_check = static_library('libapp_error_check', 'app_error_check.c',
+    include_directories: inc,
+)
+app_error_check_dep = declare_dependency(
+    link_with : app_error_check,
+    include_directories : util_inc,
+)
+
+cJSON = static_library('cJSON', 'cJSON.c')
+cJSON_dep = declare_dependency(
+    link_with : cJSON,
+)
+
+glvnd_genentry = static_library('libglvnd_genentry', 'glvnd_genentry.c')
+glvnd_genentry_dep = declare_dependency(
+    link_with : glvnd_genentry,
+)
+
+glvnd_pthread = static_library('libglvnd_pthread', 'glvnd_pthread.c')
+glvnd_pthread_dep = declare_dependency(
+    link_with : glvnd_pthread,
+    include_directories : util_inc,
+)
+
+utils_misc = static_library('libutils_misc', 'utils_misc.c')
+utils_misc_dep = declare_dependency(
+    link_with : utils_misc,
+)
+
+winsys_dispatch = static_library('libwinsys_dispatch', 'winsys_dispatch.c',
+    include_directories : [inc, util_inc],
+)
+winsys_dispatch_dep = declare_dependency(
+    link_with : winsys_dispatch,
+)
diff --git a/tests/dummy/GLX_dummy.c b/tests/dummy/GLX_dummy.c
index 2f76082..539c5d9 100644
--- a/tests/dummy/GLX_dummy.c
+++ b/tests/dummy/GLX_dummy.c
@@ -27,7 +27,9 @@
  * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
  */
 
+#ifdef HAVE_CONFIG_H
 #include <config.h>
+#endif
 
 #include <stdio.h>
 #include <stdlib.h>
diff --git a/tests/dummy/meson.build b/tests/dummy/meson.build
new file mode 100644
index 0000000..b3d0f77
--- /dev/null
+++ b/tests/dummy/meson.build
@@ -0,0 +1,30 @@
+libpatchentrypoints = static_library('patchentrypoints.a', 'patchentrypoints.c',
+    include_directories : [inc, util_inc],
+)
+
+if get_option('glx')
+  glx_dummy = shared_library('GLX_dummy', 'GLX_dummy.c',
+      include_directories : [inc, util_inc],
+      dependencies : x11_dep,
+      link_with : libpatchentrypoints,
+      version : '0',
+  )
+endif
+
+if get_option('egl')
+  egl_dummy0 = shared_library('EGL_dummy0', 'EGL_dummy.c',
+      include_directories : [inc, util_inc],
+      c_args : '-D DUMMY_VENDOR_NAME="dummy0"',
+      dependencies : [x11_dep, glvnd_pthread_dep, libdl],
+      link_with : libpatchentrypoints,
+      version : '0',
+  )
+
+  egl_dummy1 = shared_library('EGL_dummy1', 'EGL_dummy.c',
+      include_directories : [inc, util_inc],
+      c_args : '-D DUMMY_VENDOR_NAME="dummy1"',
+      dependencies : [x11_dep, glvnd_pthread_dep, libdl],
+      link_with : libpatchentrypoints,
+      version : '0',
+  )
+endif
diff --git a/tests/meson.build b/tests/meson.build
new file mode 100644
index 0000000..d5de5e6
--- /dev/null
+++ b/tests/meson.build
@@ -0,0 +1,139 @@
+subdir('dummy')
+
+# The entrypoint patching tests need --smc-check=full when running under
+# Valgrind.
+add_test_setup('valgrind',
+    exe_wrapper : [
+        'valgrind', '--error-exitcode=1', '--leak-check=full', '--smc-check=all',
+    ],
+    timeout_multiplier : 100
+)
+
+env = ['LD_LIBRARY_PATH=@0@/dummy'.format(meson.current_build_dir())]
+glx_env = env + ['__GLX_VENDOR_LIBRARY_NAME=dummy']
+glx_genentry = env + ['__GLX_FORCE_VENDOR_LIBRARY_0=dummy']
+glx_patch = glx_env + ['GLVND_TEST_PATCH_ENTRYPOINTS=1']
+glx_threads = glx_env + ['LD_PRELOAD=libpthread.so.0']
+egl_env = env + ['__EGL_VENDOR_LIBRARY_DIRS=@0@/json'.format(meson.current_source_dir())]
+
+gldispatch = executable('testgldispatch', 'testgldispatch.c',
+    include_directories : [inc, gldispatch_inc],
+    link_with : [opengl, gldispatch, libpatchentrypoints],
+)
+
+if get_option('glx')
+  glxcreatecontext_src = files('testglxcreatecontext.c', 'test_utils.c')
+  glxcreatecontext = executable('testglxcreatecontext', glxcreatecontext_src,
+      include_directories : inc,
+      dependencies : [x11_dep, glvnd_pthread_dep, libdl],
+      link_with : [glx, opengl],
+  )
+
+  glxmakecurrent_src = files('testglxmakecurrent.c', 'test_utils.c')
+  glxmakecurrent = executable('testglxmakecurrent', glxmakecurrent_src,
+      include_directories : inc,
+      dependencies : [x11_dep, glvnd_pthread_dep, libdl],
+      link_with : [glx, opengl],
+  )
+
+  glxmakecurrent_oldlink = executable('testglxmakecurrent_oldlink', glxmakecurrent_src,
+      include_directories : inc,
+      dependencies : [x11_dep, glvnd_pthread_dep, libdl],
+      link_with : gl,
+  )
+
+  glxgetprocaddress = executable('testglxgetprocaddress', 'testglxgetprocaddress.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : glx,
+  )
+
+  glxgetclientstr = executable('testglxgetclientstr', 'testglxgetclientstr.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : glx,
+  )
+
+  glxqueryversion = executable('testglxqueryversion', 'testglxqueryversion.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : glx,
+  )
+
+  patchentrypoints = executable('patchentrypoints',
+      ['testpatchentrypoints.c', 'test_utils.c'],
+      include_directories : inc,
+      dependencies : [x11_dep, libdl],
+      link_with: [glx, opengl],
+  )
+endif
+
+if get_option('egl')
+  egl_test_utils = static_library('egl_test_utils', 'egl_test_utils.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+  )
+
+  egldisplay = executable('testegldisplay', 'testegldisplay.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : [egl, egl_test_utils],
+  )
+
+  egldevice = executable('testegldevice', 'testegldevice.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : [egl, egl_test_utils],
+  )
+
+  eglgetprocaddress = executable('testeglgetprocaddress', 'testeglgetprocaddress.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : [egl, egl_test_utils],
+  )
+
+  eglmakecurrent = executable('testeglmakecurrent', 'testeglmakecurrent.c',
+      include_directories : [inc, util_inc],
+      dependencies : x11_dep,
+      link_with : [egl, opengl, egl_test_utils],
+  )
+
+  eglerror = executable('testeglerror', 'testeglerror.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : [egl, egl_test_utils],
+  )
+
+  egldebug = executable('testegldebug', 'testegldebug.c',
+      include_directories : inc,
+      dependencies : x11_dep,
+      link_with : [egl, egl_test_utils],
+  )
+endif
+
+test('gldispatch_static',          gldispatch,               args : ['-s'],                        env : env)
+test('gldispatch_generated',       gldispatch,               args : ['-g'],                        env : env)
+test('gldispatch_patched',         gldispatch,               args : ['-s', '-g', '-p'],            env : env)
+
+if get_option('glx')
+  test('glxcreatecontext',           glxcreatecontext,                                               env : glx_env)
+  test('glxmcbasic',                 glxmakecurrent,           args : ['-t', '1', '-i', '1'],        env : glx_env)
+  test('glxmcloop',                  glxmakecurrent,           args : ['-t', '1', '-i', '250'],      env : glx_env)
+  test('glxmcthreads',               glxmakecurrent,           args : ['-t', '5', '-i', '20000'],    env : glx_threads)
+  test('glxmclate',                  glxmakecurrent,           args : ['-t', '1', '-i', '1', '-l'],  env : glx_env)
+  test('glxmcoldlink',               glxmakecurrent_oldlink,   args : ['-t', '1', '-i', '1'],        env : glx_env)
+  test('glxgetprocaddress',          glxgetprocaddress,                                              env : glx_env)
+  test('glxgetprocaddress_genentry', glxgetprocaddress,                                              env : glx_genentry)
+  test('glxgetclientstr',            glxgetclientstr,                                                env : glx_env)
+  test('glxqueryversion',            glxqueryversion,                                                env : glx_env)
+  test('patchentrypoints',           patchentrypoints,                                               env : glx_patch)
+endif
+
+if get_option('egl')
+  test('egldisplay',                 egldisplay,                                                     env : egl_env)
+  test('egldevice',                  egldevice,                                                      env : egl_env)
+  test('eglgetprocaddress',          eglgetprocaddress,                                              env : egl_env)
+  test('eglmakecurrent',             eglmakecurrent,                                                 env : egl_env)
+  test('eglerror',                   eglerror,                                                       env : egl_env)
+  test('egldebug',                   egldebug,                                                       env : egl_env)
+endif
