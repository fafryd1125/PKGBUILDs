# $Id: PKGBUILD 239541 2015-05-18 23:34:43Z svenstaro $
# Maintainer: Sven-Hendrik Haase <sh@lutzhaase.com>
# Maintainer: Thomas Baechler <thomas@archlinux.org>
# Contributor: James Rayner <iphitus@gmail.com>
# Contributor: Aaron Plattner <aplattner@nvidia.com>
# Contributor: Darek Zielski <dz1125.bug.tracker@gmail.com>

pkgname=nvidia-optimus
pkgver=378.09
pkgrel=1
pkgdesc="NVIDIA drivers utilities"
arch=('i686' 'x86_64')
url="http://www.nvidia.com/"
license=('custom')
# Can be installed with mesa-glvnd or mesa (non-GLVND)
depends=('xorg-server' 'bumblebee')
optdepends=('xorg-server-devel: nvidia-xconfig'
            'opencl-nvidia: OpenCL support')
provides=('nvidia-settings' 'nvidia-utils')
conflicts=('nvidia-settings' 'nvidia-utils' 'nvidia-libgl')
options=('!strip')
install="${pkgname}.install"
source=("http://us.download.nvidia.com/XFree86/Linux-x86/${pkgver}/NVIDIA-Linux-x86-${pkgver}.run"
        "http://us.download.nvidia.com/XFree86/Linux-x86_64/${pkgver}/NVIDIA-Linux-x86_64-${pkgver}-no-compat32.run")
sha256sums=('feaaa52b96f82ed27fa7286b645c6f220984fb2831aac492b037a188f5e63b28'
            'c3c9f33ae3cf2be80a9b46aede4fb02162758194d08fd714b5d01b04df8e4355')

#validpgpkeys=(0xf56acc8f09ba9635) # Aaron Plattner <aplattner@nvidia.com>

[[ "$CARCH" = "i686" ]] && _pkg="NVIDIA-Linux-x86-${pkgver}"
[[ "$CARCH" = "x86_64" ]] && _pkg="NVIDIA-Linux-x86_64-${pkgver}-no-compat32"

prepare() {
    sh "${_pkg}.run" --extract-only
    cd "${_pkg}"
    bsdtar -xf nvidia-persistenced-init.tar.bz2
}

process_manifest () {
    declare -A type_handlers=(
        # nvidia-optimus
        ["CUDA_LIB"]="nvidia-optimus install_lib"
        ["CUDA_SYMLINK"]="nvidia-optimus symlink_lib_with_path"
        ["DOCUMENTATION"]="nvidia-optimus install_doc"
        ["DOT_DESKTOP"]="nvidia-optimus install_dot_desktop"
        ["ENCODEAPI_LIB"]="nvidia-optimus install_lib"
        ["ENCODEAPI_LIB_SYMLINK"]="nvidia-optimus symlink_lib"
        ["MANPAGE"]="nvidia-optimus install_man"
        ["NVCUVID_LIB"]="nvidia-optimus install_lib"
        ["NVCUVID_LIB_SYMLINK"]="nvidia-optimus symlink_lib"
        ["NVIFR_LIB"]="nvidia-optimus install_lib"
        ["NVIFR_LIB_SYMLINK"]="nvidia-optimus symlink_lib"
        ["UTILITY_BINARY"]="nvidia-optimus install_bin"
        ["UTILITY_LIB"]="nvidia-optimus install_lib"
        ["UTILITY_LIB_SYMLINK"]="nvidia-optimus symlink_lib"

        # Ignored entries
        ["DKMS_CONF"]="ignored"                  # dkms isn't needed with Arch's version-locked packages
        ["EGL_CLIENT_LIB"]="ignored"             # provided by libglvnd
        ["EGL_CLIENT_SYMLINK"]="ignored"         # provided by libglvnd
        ["EGL_EXTERNAL_PLATFORM_JSON"]="ignored" # provided by egl-wayland
        ["GLVND_LIB"]="ignored"                  # provided by libglvnd
        ["GLVND_SYMLINK"]="ignored"              # provided by libglvnd
        ["GLX_CLIENT_LIB"]="ignored"             # provided by libglvnd
        ["GLX_CLIENT_SYMLINK"]="ignored"         # provided by libglvnd
        ["INSTALLER_BINARY"]="ignored"           # provided by pacman :)
        ["KERNEL_MODULE_SRC"]="ignored"          # kernel modules are handled by the nvidia PKGBUILD
        ["LIBGL_LA"]="ignored"                   # .la files are not needed
        ["OPENCL_WRAPPER_LIB"]="ignored"         # provided by libcl
        ["OPENCL_WRAPPER_SYMLINK"]="ignored"     # provided by libcl
        ["OPENGL_HEADER"]="ignored"              # provided by mesa
        ["UTILITY_BIN_SYMLINK"]="ignored"        # provided by pacman
        ["XMODULE_NEWSYM"]="ignored"             # not needed for modern X servers
        ["XMODULE_SYMLINK"]="ignored"            # not needed for modern X servers

        # Ignored entries for nvidia-optimus package
        # opencl-nvidia
        ["CUDA_ICD"]="ignored"
        ["OPENCL_LIB"]="ignored"
        ["OPENCL_LIB_SYMLINK"]="ignored"
        # nvidia-libgl
        ["APPLICATION_PROFILE"]="ignored"
        ["GLVND_EGL_ICD_JSON"]="ignored"
        ["GLX_MODULE_SHARED_LIB"]="ignored"
        ["GLX_MODULE_SYMLINK"]="ignored"
        ["NVIDIA_MODPROBE_MANPAGE"]="ignored"
        ["NVIDIA_MODPROBE"]="ignored"
        ["OPENGL_LIB"]="ignored"
        ["OPENGL_SYMLINK"]="ignored"
        ["TLS_LIB"]="ignored"
        ["VDPAU_LIB"]="ignored"
        ["VDPAU_SYMLINK"]="ignored"
        ["VULKAN_ICD_JSON"]="ignored"
        ["XMODULE_SHARED_LIB"]="ignored"
        ["XORG_OUTPUTCLASS_CONFIG"]="ignored"
    )

    tail -n +9 .manifest | {
        while read name perm type extra1 extra2 extra3; do
            if [ ${type_handlers[${type}]+isset} ]; then
                local data=( ${type_handlers[${type}]} )
                local pkg=${data[0]}
                local handler=${data[1]}

                # Check if this file type is handled by the current package.
                # Otherwise, ignore it.
                if [ ${pkg} = ${pkgname} ]; then
                    eval ${handler} $name $perm $type $extra1 $extra2 $extra3
                fi
            else
                echo "Unrecognized manifest type ${type}"
                exit 1
            fi
        done
    }

    mkdir -p "${pkgdir}/usr/share/licenses"
    ln -s nvidia "${pkgdir}/usr/share/licenses/${pkgname}"
}

install_bin()           { install -D -m$2 "$1" "${pkgdir}/usr/bin/$1"; }

install_lib() {
    case "$1" in
        libnvidia-egl-wayland*)
            # Use the separate egl-wayland package.
            ;;
        *)
            install -D -m$2 "$1" "${pkgdir}/usr/lib/$5$1"
            ;;
    esac
}

install_man() {
    case "$1" in
        nvidia-installer*)
            # Skip manpages for utilities that are not packaged.
            ;;
        *)
            install -D -m$2 "$1" "${pkgdir}/usr/share/man/man1/$1";
            ;;
    esac
}

install_x_driver() {
    case "$1" in
        libnvidia-wfb*)
            # not needed for modern X servers
            ;;
        *)
            install -D -m$2 "$1" "${pkgdir}/usr/lib/xorg/modules/$4$1";
            ;;
    esac
}

install_dot_desktop() {
    install -D -m$2 "$1" "${pkgdir}/usr/share/applications/$1"

    # Set the appropriate paths and categories in the .desktop file
    sed -i -e 's:__UTILS_PATH__:/usr/bin:' \
           -e 's:__PIXMAP_PATH__:/usr/share/doc/nvidia:' \
           -e 's:Application;Settings;:Settings;HardwareSettings;:' \
           "${pkgdir}/usr/share/applications/$1"
}

install_tls() {
    # Only "new" TLS is needed on modern systems.
    case $5 in
        CLASSIC)
            return
            ;;
        NEW)
            install -D -m$2 "$1" "${pkgdir}/usr/lib/$1"
            ;;
        *)
            echo "Unrecognized TLS library type $5"
            exit 1
            ;;
    esac
}

install_doc() {
    # Strip the historical NVIDIA_GLX-1.0 prefix off of the target path and
    # "html" off the source path.
    local src=$(basename $1)
    local target=${4#NVIDIA_GLX-1.0/}
    install -D -m$2 "$1" "${pkgdir}/usr/share/doc/nvidia/${target}/${src}"
}

symlink_lib_with_path() { ln -s "$6" "${pkgdir}/usr/lib/$5$1"; }

symlink_lib() {
    case "$1" in
        libnvidia-egl-wayland*)
            # Use the separate egl-wayland package.
            ;;
        *)
            ln -s "$5" "${pkgdir}/usr/lib/$1"
            ;;
    esac
}

package() {
    cd "${_pkg}"

    process_manifest

    install -D -m644 nvidia-persistenced-init/systemd/nvidia-persistenced.service.template \
                     "${pkgdir}/usr/lib/systemd/system/nvidia-persistenced.service"
    sed -i 's/__USER__/nvidia-persistenced/' \
           "${pkgdir}/usr/lib/systemd/system/nvidia-persistenced.service"

    install -D -m644 LICENSE "${pkgdir}/usr/share/licenses/nvidia/LICENSE"
    ln -s nvidia "${pkgdir}/usr/share/doc/${pkgname}"
}
